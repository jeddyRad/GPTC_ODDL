# Generated by Django 5.2.4 on 2025-07-20 16:55

import api.models
import django.contrib.postgres.indexes
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('is_group', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('color', models.CharField(default='#3788d8', max_length=7)),
                ('capacity_charge', models.IntegerField(default=100)),
            ],
        ),
        migrations.CreateModel(
            name='Projet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Project name', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description', null=True)),
                ('status', models.CharField(choices=[('planning', 'Planning'), ('active', 'Active'), ('on_hold', 'On Hold'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planning', max_length=20)),
                ('start_date', models.DateField(help_text='Planned start date')),
                ('end_date', models.DateField(help_text='Planned end date')),
                ('actual_end_date', models.DateField(blank=True, help_text='Actual end date', null=True)),
                ('progress', models.IntegerField(default=0, help_text='Progress in percentage (0-100)')),
                ('risk_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='low', max_length=10)),
                ('color', models.CharField(default='#3788d8', help_text='Project hex color', max_length=7)),
                ('service', models.ForeignKey(blank=True, help_text='Service principal du projet', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projets_principaux', to='api.service')),
                ('services', models.ManyToManyField(blank=True, help_text='Services secondaires impliqués dans le projet', related_name='projets', to='api.service')),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='ModeUrgence',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('titre', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('est_actif', models.BooleanField(default=True)),
                ('date_debut', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_fin', models.DateTimeField(blank=True, null=True)),
                ('severite', models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyen'), ('high', 'Élevé'), ('critical', 'Critique')], default='medium', max_length=10)),
                ('ressources_allouees', models.TextField(blank=True, null=True)),
                ('service_principal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modes_urgence', to='api.service')),
            ],
            options={
                'db_table': 'api_modeurgence',
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('DIRECTOR', 'Director'), ('MANAGER', 'Manager'), ('EMPLOYEE', 'Employee')], default='EMPLOYEE', max_length=20)),
                ('is_admin', models.BooleanField(default=False, help_text="Cet utilisateur a aussi les droits d'ADMIN")),
                ('telephone', models.CharField(blank=True, max_length=20, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('photo_profil', models.ImageField(blank=True, null=True, upload_to='profils/')),
                ('est_actif', models.BooleanField(default=True)),
                ('derniere_connexion', models.DateTimeField(blank=True, null=True)),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='utilisateurs', to='api.service')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='utilisateur', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tache',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('personnel', 'Personnel'), ('service', 'Service'), ('projet', 'Projet')], default='personnel', help_text='Type de tâche : personnel, service ou projet', max_length=20)),
                ('title', models.CharField(help_text='Task title', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description', null=True)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('review', 'In Review'), ('completed', 'Completed')], default='todo', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('deadline', models.DateTimeField(help_text='Deadline')),
                ('completion_date', models.DateTimeField(blank=True, help_text='Completion date', null=True)),
                ('estimated_time', models.IntegerField(default=0, help_text='Estimated time in minutes')),
                ('tracked_time', models.IntegerField(default=0, help_text='Time spent in minutes')),
                ('workload_points', models.IntegerField(default=0, help_text='Workload points')),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags/keywords')),
                ('project', models.ForeignKey(blank=True, help_text='Associated project', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taches', to='api.projet')),
                ('service', models.ForeignKey(blank=True, help_text='Responsible service', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taches', to='api.service')),
                ('assignees', models.ManyToManyField(blank=True, help_text='Users assigned to this task', related_name='taches_assignees', to='api.utilisateur')),
                ('creator', models.ForeignKey(help_text='Task creator', on_delete=django.db.models.deletion.CASCADE, related_name='taches_creees', to='api.utilisateur')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='service',
            name='chef',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='services_diriges', to='api.utilisateur'),
        ),
        migrations.AddField(
            model_name='projet',
            name='chef',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projets_diriges', to='api.utilisateur'),
        ),
        migrations.AddField(
            model_name='projet',
            name='creator',
            field=models.ForeignKey(blank=True, help_text='Project creator', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projets_crees', to='api.utilisateur'),
        ),
        migrations.AddField(
            model_name='projet',
            name='membres',
            field=models.ManyToManyField(blank=True, related_name='projets_participes', to='api.utilisateur'),
        ),
        migrations.AddField(
            model_name='projet',
            name='team_members',
            field=models.ManyToManyField(blank=True, help_text='Project team members', related_name='projets_assignes', to='api.utilisateur'),
        ),
        migrations.CreateModel(
            name='PretEmploye',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('date_debut', models.DateField()),
                ('date_fin', models.DateField()),
                ('raison', models.TextField()),
                ('statut', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('active', 'Active'), ('completed', 'Completed'), ('rejected', 'Rejected')], max_length=20)),
                ('impact_charge', models.IntegerField()),
                ('cout', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('service_destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prets_destination', to='api.service')),
                ('service_source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prets_source', to='api.service')),
                ('employe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.utilisateur')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PieceJointe',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Nom original du fichier', max_length=255)),
                ('file', models.FileField(help_text='Fichier uploadé', upload_to=api.models.upload_attachment_path)),
                ('type_mime', models.CharField(help_text='Type MIME du fichier', max_length=100)),
                ('size', models.BigIntegerField(help_text='Taille du fichier en octets')),
                ('checksum', models.CharField(help_text='Hash SHA-256 du fichier', max_length=64)),
                ('est_chiffre', models.BooleanField(default=False, help_text='Fichier chiffré')),
                ('related_to', models.CharField(choices=[('task', 'Tâche'), ('project', 'Projet'), ('user', 'Utilisateur')], help_text="Type d'entité liée", max_length=20)),
                ('related_id', models.UUIDField(help_text="UUID de l'entité liée (tâche, projet ou utilisateur)")),
                ('telecharge_par', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pieces_jointes_uploadees', to='api.utilisateur')),
            ],
            options={
                'verbose_name': 'Pièce jointe',
                'verbose_name_plural': 'Pièces jointes',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(max_length=50)),
                ('titre', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('est_lue', models.BooleanField(default=False)),
                ('priorite', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], max_length=10)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.utilisateur')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='api.conversation')),
                ('read_by', models.ManyToManyField(blank=True, related_name='read_messages', to='api.utilisateur')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='api.utilisateur')),
            ],
            options={
                'ordering': ['date_creation'],
            },
        ),
        migrations.AddField(
            model_name='conversation',
            name='participants',
            field=models.ManyToManyField(related_name='conversations', to='api.utilisateur'),
        ),
        migrations.CreateModel(
            name='Commentaire',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('date_maj', models.DateTimeField(auto_now=True)),
                ('contenu', models.TextField()),
                ('mentions', models.JSONField(blank=True, null=True)),
                ('est_modifie', models.BooleanField(default=False)),
                ('tache', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentaires', to='api.tache')),
                ('auteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.utilisateur')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='utilisateur',
            constraint=models.UniqueConstraint(condition=models.Q(('role', 'MANAGER')), fields=('service',), name='unique_manager_per_service'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['chef'], name='api_service_chef_id_c5dda2_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['creator'], name='api_projet_creator_092dab_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['chef'], name='api_projet_chef_id_556a78_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=models.Index(fields=['status'], name='api_projet_status_4e5d9c_idx'),
        ),
        migrations.AddIndex(
            model_name='projet',
            index=django.contrib.postgres.indexes.GinIndex(fields=['description'], name='projet_descr_gin_trgm_idx', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='piecejointe',
            index=models.Index(fields=['related_to'], name='api_piecejo_related_7d55a4_idx'),
        ),
        migrations.AddIndex(
            model_name='piecejointe',
            index=models.Index(fields=['related_id'], name='api_piecejo_related_42500c_idx'),
        ),
        migrations.AddIndex(
            model_name='piecejointe',
            index=models.Index(fields=['telecharge_par'], name='api_piecejo_telecha_9f0ff6_idx'),
        ),
    ]
